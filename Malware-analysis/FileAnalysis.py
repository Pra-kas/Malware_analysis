import hashlib
import tkinter as tk
import requests
from urllib3.exceptions import InsecureRequestWarning
from PIL import Image, ImageTk

requests.packages.urllib3.disable_warnings(InsecureRequestWarning)


class VirusTotalAnalyzer:
    def __init__(self, api_key="464660c9da6e6cfd9edc41d92d354f7b8b3bfdd76a01d6cfdabc46d6a575bb3b"):
        self.api_key = api_key
    
    def alert(self,title,message,image_path):
        self.root = tk.Tk()
        self.root.title(title)
        self.root.geometry("500x400")
        self.root.resizable(False, False)

        self.label = tk.Label(self.root, text=message, font=("Helvetica", 14, "bold"))
        self.label.pack(pady=10)

        self.image = Image.open(image_path)
        self.photo = ImageTk.PhotoImage(self.image)

        self.image_label = tk.Label(self.root, image=self.photo)
        self.image_label.pack(pady=10)

        self.blink_interval = 200  
        self.blink()
        self.root.mainloop()

    def blink(self):
        if self.root.attributes('-alpha') == 1.0:
            self.root.attributes('-alpha', 0.0)
        else:
            self.root.attributes('-alpha', 1.0)

        self.root.after(self.blink_interval, self.blink)

    def calculate_md5(self, file_path):
        md5_hash = hashlib.md5()
        with open(file_path, 'rb') as f:
            for chunk in iter(lambda: f.read(8192), b''):
                md5_hash.update(chunk)
        return md5_hash.hexdigest()

    def get_report(self, file_hash):
        params = {'apikey': self.api_key, 'resource': file_hash}
        response_data = requests.get('https://www.virustotal.com/vtapi/v2/file/report', params=params, verify=True)
        return response_data.json()

    def generate_html_report(self, file_path):
        file_hash = self.calculate_md5(file_path)
        json_data = self.get_report(file_hash)

        if json_data.get('response_code') == 0:
            print(f'\nThe file with the {file_hash} hash number was not found in VirusTotal\n')
        else:
            html_file_path = 'scan_report_file.html'
            self.write_html_report(file_path, html_file_path, json_data)

            positives = int(json_data.get('positives'))
            if positives > 0:
                print(f'\nThe file is considered MALWARE based on {positives} positive detections.\n')
            else:
                print('\nThe file is NOT identified as malware.\n')

            print(f'HTML report saved to {html_file_path}\n')

    def write_html_report(self, file_path, html_file_path, json_data):
        positives = int(json_data.get('positives'))

        with open(html_file_path, 'w', encoding='utf-8') as html_file:
            html_file.write('<html><head><title>Scan Report</title></head><body>')
            html_file.write(f'<h2>Scan Results for {file_path}</h2>')
            html_file.write(f'<p>Detections: {positives}</p>')

            if positives > 0:
                self.write_detections(html_file, 'Positive Detections', json_data, detected=True)
                message_text = "Malicious application"
                title_text = "Malware Alert"
                image_path = "warning-sign.png"
                self.alert(title_text,message_text,image_path)

            html_file.write('</body></html>')

    def write_detections(self, html_file, header, json_data, detected=True):
        html_file.write(f'<h3>{header}</h3>')
        html_file.write('<ul>')
        for scanner, result in json_data['scans'].items():
            if result['detected'] == detected:
                html_file.write(f'<li>{scanner}: {result["result"]}</li>')
        html_file.write('</ul>')

def main(file_path):
    analyzer = VirusTotalAnalyzer()
    analyzer.generate_html_report(file_path)
